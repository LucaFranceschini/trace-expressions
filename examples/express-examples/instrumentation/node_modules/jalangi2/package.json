{
  "_args": [
    [
      {
        "raw": "jalangi2",
        "scope": null,
        "escapedName": "jalangi2",
        "name": null,
        "rawSpec": "jalangi2",
        "spec": "/home/davide/jalangi2",
        "type": "directory"
      },
      "/home/davide"
    ]
  ],
  "_from": "jalangi2",
  "_id": "jalangi2@0.2.5",
  "_inCache": true,
  "_location": "/jalangi2",
  "_phantomChildren": {
    "minimist": "0.0.8"
  },
  "_requested": {
    "raw": "jalangi2",
    "scope": null,
    "escapedName": "jalangi2",
    "name": null,
    "rawSpec": "jalangi2",
    "spec": "/home/davide/jalangi2",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:jalangi2",
  "_shasum": "64da2284fe858ff684c85316578bc0bf8c91a8da",
  "_shrinkwrap": null,
  "_spec": "jalangi2",
  "_where": "/home/davide",
  "bin": {
    "jalangi2": "src/js/commands/jalangi.js"
  },
  "bugs": {
    "url": "https://github.com/Samsung/jalangi2/issues"
  },
  "bundleDependencies": [
    "acorn",
    "esotope"
  ],
  "dependencies": {
    "acorn": "3.1.0",
    "argparse": "0.1.6",
    "codemirror": "5.1.0",
    "cover": "0.2.9",
    "datatables": "1.10.6",
    "esotope": "1.4.5",
    "estraverse": "4.0.0",
    "graceful-ncp": "2.0.0",
    "jquery": "2.1.3",
    "mkdirp": "0.5.0",
    "parse5": "2.1.5",
    "q": "1.2.0",
    "rewriting-proxy": "0.5.1",
    "temp": "0.8.1"
  },
  "description": "dynamic analysis framework for JavaScript",
  "devDependencies": {
    "mocha": "^2.4.5",
    "shelljs": "^0.6.0"
  },
  "homepage": "https://github.com/Samsung/jalangi2#readme",
  "license": "Apache-2.0",
  "main": "src/js/utils/api.js",
  "name": "jalangi2",
  "optionalDependencies": {},
  "readme": "Jalangi2\n=======\n### Introduction\n\nJalangi2 is a framework for writing dynamic analyses for JavaScript.\nJalangi1 is still available at https://github.com/SRA-SiliconValley/jalangi, but we no longer plan to develop it.\nJalangi2 does not support the record/replay feature of Jalangi1.\nIn the Jalangi2 distribution you will find several analyses:\n\n  * an analysis to [track NaNs](src/js/sample_analyses/dlint/CheckNaN.js).\n  * an analysis to [check if an undefined is concatenated to a string](src/js/sample_analyses/dlint/ConcatUndefinedToString.js).\n  * [Memory analysis](https://github.com/Samsung/meminsight): a memory-profiler for JavaScript and HTML5.\n  * [DLint](https://github.com/ksen007/jalangi2analyses): a a dynamic checker for JavaScript bad coding practices.\n  * [JITProf](https://github.com/ksen007/jalangi2analyses): a dynamic JIT-unfriendly code snippet detection tool.\n  * [analysisCallbackTemplate.js](src/js/runtime/analysisCallbackTemplate.js): a template for writing a dynamic analysis.\n  * and [more ...](src/js/sample_analyses/)\n\n### Requirements\n\nWe tested Jalangi on Mac OS X 10.10 with Chromium browser.  Jalangi should work on Mac OS\n10.7, Ubuntu 11.0 and higher and Windows 7 or higher. Jalangi will NOT work with IE.\n\n  * Node.js v4.4.5 available at https://nodejs.org/en/download/releases/.  We have tested Jalangi with Node v4.4.5.\n  * Chrome browser if you need to test web apps.\n  * Python (http://python.org) version 2.7 or higher and less than 3.0.\n\nOn Windows you need the following extra dependencies:\n\n  * Install Microsoft Visual Studio 2010 (Free express version is fine).\n  * If on 64bit also install Windows 7 64-bit SDK.\n\nIf you have a fresh installation of Ubuntu, you can install all the requirements by invoking the following commands from a terminal.\n\n    sudo apt-get update\n    sudo apt-get install python-software-properties python g++ make\n    sudo add-apt-repository ppa:chris-lea/node.js\n    sudo apt-get update\n    sudo apt-get install nodejs\n    sudo apt-get update\n    sudo apt-get install chromium-browser\n\n### Installation\n\nClone the repository, and then run:\n\n    npm install\n\n### Run tests\n\n    python scripts/test.traceall.py\n    python scripts/test.analysis.py\n    python scripts/test.dlint.py\n\n### Usage\n\n**Analysis in node.js with on-the-fly instrumentation**\n\nAn analysis can be performed on a JavaScript file in node.js by issuing the following commands:\n\n    node src/js/commands/jalangi.js --inlineIID --inlineSource --analysis src/js/sample_analyses/ChainedAnalyses.js --analysis src/js/sample_analyses/dlint/Utils.js --analysis src/js/sample_analyses/dlint/CheckNaN.js --analysis src/js/sample_analyses/dlint/FunCalledWithMoreArguments.js --analysis src/js/sample_analyses/dlint/CompareFunctionWithPrimitives.js --analysis src/js/sample_analyses/dlint/ShadowProtoProperty.js --analysis src/js/sample_analyses/dlint/ConcatUndefinedToString.js --analysis src/js/sample_analyses/dlint/UndefinedOffset.js tests/octane/deltablue.js\n\nIn the above analysis, we chained several analyses by including *--analysis src/js/analyses/ChainedAnalyses.js* as the first analysis.\nThe command runs the following analyses\n\n    src/js/sample_analyses/dlint/CheckNaN.js\n    src/js/sample_analyses/dlint/FunCalledWithMoreArguments.js\n    src/js/sample_analyses/dlint/CompareFunctionWithPrimitives.js\n    src/js/sample_analyses/dlint/ShadowProtoProperty.js\n    src/js/sample_analyses/dlint/ConcatUndefinedToString.js\n    src/js/sample_analyses/dlint/UndefinedOffset.js\n\nThe implementation of an analysis requires the implementation of several callback functions. One can start writing\nan writing analysis using the template file [src/js/runtime/analysisCallbackTemplate.js](src/js/runtime/analysisCallbackTemplate.js).\nA documentation of these call back functions can be found at [docs/MyAnalysis.html](docs/MyAnalysis.html).\nA tutorial on writing a Jalangi analysis can be found at [docs/tutorial1.md](docs/tutorial1.md). While writing \nan analysis one could run [src/js/sample_analyses/pldi16/TraceAll.js](src/js/sample_analyses/pldi16/TraceAll.js) \nanalysis on a JavaScript file to print all the callback functions that got \ncalled during the execution of the file.  Such a trace is useful to see what callbacks get called during an \nexecution.  The following command runs the TraceAll.js analysis on the file [tests/octane/deltablue.js](tests/octane/deltablue.js).\n\n    node src/js/commands/jalangi.js --inlineIID --inlineSource --analysis src/js/sample_analyses/ChainedAnalyses.js --analysis src/js/runtime/SMemory.js --analysis src/js/sample_analyses/pldi16/TraceAll.js tests/octane/deltablue.js\n\n**Analysis in node.js with explicit one-file-at-a-time offline instrumentation**\n\nAn analysis can be performed on a JavaScript file in node.js by issuing the following commands:\n\n    node src/js/commands/esnstrument_cli.js --inlineIID --inlineSource tests/octane/deltablue.js\n    node src/js/commands/direct.js --analysis src/js/sample_analyses/ChainedAnalyses.js --analysis src/js/sample_analyses/dlint/Utils.js --analysis src/js/sample_analyses/dlint/CheckNaN.js --analysis src/js/sample_analyses/dlint/FunCalledWithMoreArguments.js --analysis src/js/sample_analyses/dlint/CompareFunctionWithPrimitives.js --analysis src/js/sample_analyses/dlint/ShadowProtoProperty.js --analysis src/js/sample_analyses/dlint/ConcatUndefinedToString.js --analysis src/js/sample_analyses/dlint/UndefinedOffset.js tests/octane/deltablue_jalangi_.js\n\nIn the above analysis, we chained several analyses by including *--analysis src/js/analyses/ChainedAnalyses.js*.\n\n**Analysis in a browser using offline instrumentation**\n\nAn analysis can be performed on a web app using the Chrome browser by issuing the following commands:\n\n    node src/js/commands/instrument.js --inlineIID --inlineSource -i --inlineJalangi --analysis src/js/sample_analyses/ChainedAnalyses.js --analysis src/js/sample_analyses/dlint/Utils.js --analysis src/js/sample_analyses/dlint/CheckNaN.js --analysis src/js/sample_analyses/dlint/FunCalledWithMoreArguments.js --analysis src/js/sample_analyses/dlint/CompareFunctionWithPrimitives.js --analysis src/js/sample_analyses/dlint/ShadowProtoProperty.js --analysis src/js/sample_analyses/dlint/ConcatUndefinedToString.js --analysis src/js/sample_analyses/dlint/UndefinedOffset.js --outputDir /tmp tests/tizen/annex\n    open file:///tmp/annex/index.html\n\nWhile performing analysis in a browser, one needs to press Alt-Shift-T to end the analysis and to print the analysis results in the console.\n\n**Analysis in a browser using a proxy and on-the-fly instrumentation**\n\nYou can also setup a proxy to instrument JavaScript files on-the-fly.  To do so, you need to install [mitmproxy](http://mitmproxy.org/)\nand [mitmproxy CA](http://mitmproxy.org/doc/ssl.html).  Then you can run the Jalangi instrumentation proxy by issuing the following\ncommand:\n\n    mitmdump --quiet --anticache -s \"scripts/proxy.py --inlineIID --inlineSource --analysis src/js/sample_analyses/ChainedAnalyses.js --analysis src/js/runtime/analysisCallbackTemplate.js\"\n\nIn your browser, the http and https proxy should be set to 127.0.0.1:8080.  Now if you load a website in your browser, all JavaScript files associated with the website will get instrumented on-the-fly.\n\nOn a mac, the proxy can be set and launched automatically by issuing the following command:\n\n    ./scripts/mitmproxywrapper.py --toggle --auto-disable --quiet --anticache -s \"scripts/proxy.py --inlineIID --inlineSource --analysis src/js/sample_analyses/ChainedAnalyses.js --analysis src/js/runtime/analysisCallbackTemplate.js\"\n\nThe command starts mitmproxy if the proxy is not currently enabled, and disables it otherwise.\nThe `--auto-disable` option will automatically disable the proxy when the script is interrupted.\n\nJalangi2 caches the instrumented source files in `./cache/`.\nThe use of the cache can be disabled during development by passing the `--no-cache` flag to `scripts/proxy.py`.\n\n### Developing an analysis in Jalangi2\n\nRefer to [docs/index.html](docs/index.html) and [docs/commands.md](docs/commands.md) for further information.  A tutorial\non writing a Jalangi analysis can be found in [docs/tutorial1.md](docs/tutorial1.md).  \n\n### Supported ECMAScript versions\n\nJalangi2 supports ECMAScript 5.1, plus the `const` construct from ECMAScript 6.  Other ES6 features may work, but have not been tested.\n\nLicense\n-------\n\nJalangi2 is distributed under the [Apache License](http://www.apache.org/licenses/LICENSE-2.0.html).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Samsung/jalangi2.git"
  },
  "scripts": {
    "test": "mocha --reporter spec node_test && python scripts/runalltests.py"
  },
  "version": "0.2.5"
}
